{
  "name": "Promptgorillas assignment",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ba668210-b072-48de-be0a-8c62d11d4a85",
        "responseMode": "responseNode",
        "options": {
          "binaryPropertyName": "=data"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        160,
        220
      ],
      "id": "f33a81fa-82ac-44ed-b688-dd7a5b878cf3",
      "name": "Webhook",
      "webhookId": "ba668210-b072-48de-be0a-8c62d11d4a85"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"Transcript\": \"{{ $('Get transcript').item.json.text }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        1820,
        220
      ],
      "id": "63dd5fe2-4479-4d17-b005-423bfd0720ee",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "const sentenceRegex = /[^.!?]*[.!?]/g;\n\nlet keywordRegex = /\\b(waarom|dus|hoe|wat|waar|wanneer|wie|probleem|kwestie|bezwaar|zorg|tegenwerpingen)\\b/i;\n\nswitch ($('Webhook').first().json.body.iso_code) {\n  case 'en':\n    keywordRegex = /\\b(why|so|how|what|where|when|who|problem|issue|objection|concern|counterargument)\\b/i;\n    break;\n  case 'de':\n    keywordRegex = /\\b(warum|also|wie|was|wo|wann|wer|problem|frage|einwand|bedenken|gegenargument)\\b/i;\n    break;\n  case 'se':\n    keywordRegex = /\\b(varför|så|hur|vad|var|när|vem|problem|fråga|invändning|oro|mothugg)\\b/i;\n    break;\n  case 'fr':\n    keywordRegex = /\\b(pourquoi|donc|comment|quoi|où|quand|qui|problème|question|objection|préoccupation|réserves)\\b/i;\n    break;\n}\n\n// Get the text content of the document\nconst content = $input.first().json.content;\n\n/**\n * @type any[]\n */\nlet requests = [];\nlet match;\n\nwhile ((match = sentenceRegex.exec(content)) !== null) {\n  const sentence = match[0];\n  const startIndex = match.index;\n  const endIndex = startIndex + sentence.length;\n\n  if (keywordRegex.test(sentence)) {\n    // Avoid range 0 to prevent \"cannot operate on first section break\" error\n    const safeStartIndex = startIndex === 0 ? 1 : startIndex;\n\n    requests.push({\n      updateTextStyle: {\n        range: {\n          startIndex: safeStartIndex,\n          endIndex: endIndex,\n        },\n        textStyle: {\n          backgroundColor: {\n            color: {\n              rgbColor: {\n                red: 1,\n                green: 1,\n                blue: 0.6,\n              },\n            },\n          },\n        },\n        fields: 'backgroundColor',\n      },\n    });\n  }\n}\n\nreturn [{ json: { requests } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        220
      ],
      "id": "8d1b047b-a8f4-42de-bca2-d0603a921ba9",
      "name": "Get update request multiple languages"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7e2cb77f-3db6-4701-b64e-ade5167f9ddb",
              "leftValue": "={{ $json.requests }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1540,
        220
      ],
      "id": "575c43c6-406e-4163-923a-9bae143807ba",
      "name": "If there are requests"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://docs.googleapis.com/v1/documents/{{ $('Webhook').item.json.body.document_id }}:batchUpdate",
        "authentication": "genericCredentialType",
        "genericAuthType": "=httpBearerAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "requests",
              "value": "={{ $json.requests }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1680,
        100
      ],
      "id": "ee4c61f7-fbb8-4450-89c9-899144f6c10c",
      "name": "Update google docs",
      "credentials": {
        "oAuth2Api": {
          "id": "JcDIf7TvIp5Y4jcS",
          "name": "Unnamed credential"
        },
        "httpBearerAuth": {
          "id": "icQMClrFKpefyJdx",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "documentURL": "={{ $('Webhook').item.json.body.document_id }}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        1080,
        220
      ],
      "id": "fc9f34bc-ceb0-4402-b308-8a9f9c8c2d19",
      "name": "Get full document content",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "AII4VoU5JF0fBRZW",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "={{ $('Webhook').item.json.body.document_id }}",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insert",
              "text": "={{ $json.text }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        860,
        220
      ],
      "id": "fcaea687-c5cc-41e7-b249-5ebda38ba178",
      "name": "Write transcript to document",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "AII4VoU5JF0fBRZW",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "data0",
        "options": {
          "language": "={{ $json.body.iso_code }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        360,
        220
      ],
      "id": "a367d137-a0d4-4fab-b726-983ddf4cfc42",
      "name": "Get transcript",
      "credentials": {
        "openAiApi": {
          "id": "niMNesjrD7d7FRiU",
          "name": "OpenAi account Promptgorillas"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3b087c7d-2b3e-46e2-8b2a-a5fa06674a3c",
              "leftValue": "={{ $json.text }}",
              "rightValue": "=TV Gelderland 2021",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        580,
        220
      ],
      "id": "e5eb8e32-521a-402d-b1a4-3f57a6524ab2",
      "name": "exclude weirdt response"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Get transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get update request multiple languages": {
      "main": [
        [
          {
            "node": "If there are requests",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If there are requests": {
      "main": [
        [
          {
            "node": "Update google docs",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update google docs": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get full document content": {
      "main": [
        [
          {
            "node": "Get update request multiple languages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write transcript to document": {
      "main": [
        [
          {
            "node": "Get full document content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get transcript": {
      "main": [
        [
          {
            "node": "exclude weirdt response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "exclude weirdt response": {
      "main": [
        [
          {
            "node": "Write transcript to document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "03e08fc3-7f4e-4c5c-b79a-75d92ee63ff1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1cf2f0c07cf64e948e6e58dbad0f1f285f399ce6d423b6732bf73c253f1a5a40"
  },
  "id": "3jZewDVJLSSQuslq",
  "tags": []
}